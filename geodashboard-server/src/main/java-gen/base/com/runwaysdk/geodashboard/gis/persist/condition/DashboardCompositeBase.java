package com.runwaysdk.geodashboard.gis.persist.condition;

@com.runwaysdk.business.ClassSignature(hash = -499807212)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to DashboardComposite.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class DashboardCompositeBase extends com.runwaysdk.geodashboard.gis.persist.condition.DashboardCondition implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "com.runwaysdk.geodashboard.gis.persist.condition.DashboardComposite";
  public static java.lang.String LEFTCONDITION = "leftCondition";
  public static java.lang.String RIGHTCONDITION = "rightCondition";
  private static final long serialVersionUID = -499807212;
  
  public DashboardCompositeBase()
  {
    super();
  }
  
  public com.runwaysdk.geodashboard.gis.persist.condition.DashboardCondition getLeftCondition()
  {
    if (getValue(LEFTCONDITION).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.geodashboard.gis.persist.condition.DashboardCondition.get(getValue(LEFTCONDITION));
    }
  }
  
  public String getLeftConditionId()
  {
    return getValue(LEFTCONDITION);
  }
  
  public void validateLeftCondition()
  {
    this.validateAttribute(LEFTCONDITION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLeftConditionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.gis.persist.condition.DashboardComposite.CLASS);
    return mdClassIF.definesAttribute(LEFTCONDITION);
  }
  
  public void setLeftCondition(com.runwaysdk.geodashboard.gis.persist.condition.DashboardCondition value)
  {
    if(value == null)
    {
      setValue(LEFTCONDITION, "");
    }
    else
    {
      setValue(LEFTCONDITION, value.getId());
    }
  }
  
  public com.runwaysdk.geodashboard.gis.persist.condition.DashboardCondition getRightCondition()
  {
    if (getValue(RIGHTCONDITION).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.geodashboard.gis.persist.condition.DashboardCondition.get(getValue(RIGHTCONDITION));
    }
  }
  
  public String getRightConditionId()
  {
    return getValue(RIGHTCONDITION);
  }
  
  public void validateRightCondition()
  {
    this.validateAttribute(RIGHTCONDITION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getRightConditionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.gis.persist.condition.DashboardComposite.CLASS);
    return mdClassIF.definesAttribute(RIGHTCONDITION);
  }
  
  public void setRightCondition(com.runwaysdk.geodashboard.gis.persist.condition.DashboardCondition value)
  {
    if(value == null)
    {
      setValue(RIGHTCONDITION, "");
    }
    else
    {
      setValue(RIGHTCONDITION, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static DashboardCompositeQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    DashboardCompositeQuery query = new DashboardCompositeQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static DashboardComposite get(String id)
  {
    return (DashboardComposite) com.runwaysdk.business.Business.get(id);
  }
  
  public static DashboardComposite getByKey(String key)
  {
    return (DashboardComposite) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static DashboardComposite lock(java.lang.String id)
  {
    DashboardComposite _instance = DashboardComposite.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static DashboardComposite unlock(java.lang.String id)
  {
    DashboardComposite _instance = DashboardComposite.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
