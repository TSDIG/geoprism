package com.runwaysdk.geodashboard.parse;

@com.runwaysdk.business.ClassSignature(hash = -42557144)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to DateParseException.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class DateParseExceptionBase extends com.runwaysdk.business.SmartException implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "com.runwaysdk.geodashboard.parse.DateParseException";
  public static java.lang.String ID = "id";
  public static java.lang.String INPUT = "input";
  public static java.lang.String PATTERN = "pattern";
  private static final long serialVersionUID = -42557144;
  
  public DateParseExceptionBase()
  {
    super();
  }
  
  public DateParseExceptionBase(java.lang.String developerMessage)
  {
    super(developerMessage);
  }
  
  public DateParseExceptionBase(java.lang.String developerMessage, java.lang.Throwable cause)
  {
    super(developerMessage, cause);
  }
  
  public DateParseExceptionBase(java.lang.Throwable cause)
  {
    super(cause);
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.parse.DateParseException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public String getInput()
  {
    return getValue(INPUT);
  }
  
  public void validateInput()
  {
    this.validateAttribute(INPUT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getInputMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.parse.DateParseException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(INPUT);
  }
  
  public void setInput(String value)
  {
    if(value == null)
    {
      setValue(INPUT, "");
    }
    else
    {
      setValue(INPUT, value);
    }
  }
  
  public String getPattern()
  {
    return getValue(PATTERN);
  }
  
  public void validatePattern()
  {
    this.validateAttribute(PATTERN);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getPatternMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.parse.DateParseException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(PATTERN);
  }
  
  public void setPattern(String value)
  {
    if(value == null)
    {
      setValue(PATTERN, "");
    }
    else
    {
      setValue(PATTERN, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{id}", this.getId());
    message = replace(message, "{input}", this.getInput());
    message = replace(message, "{pattern}", this.getPattern());
    return message;
  }
  
}
