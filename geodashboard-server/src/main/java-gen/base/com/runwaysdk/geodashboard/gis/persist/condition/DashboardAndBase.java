package com.runwaysdk.geodashboard.gis.persist.condition;

@com.runwaysdk.business.ClassSignature(hash = 2062862889)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to DashboardAnd.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class DashboardAndBase extends com.runwaysdk.geodashboard.gis.persist.condition.DashboardComposite implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "com.runwaysdk.geodashboard.gis.persist.condition.DashboardAnd";
  private static final long serialVersionUID = 2062862889;
  
  public DashboardAndBase()
  {
    super();
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static DashboardAndQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    DashboardAndQuery query = new DashboardAndQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static DashboardAnd get(String id)
  {
    return (DashboardAnd) com.runwaysdk.business.Business.get(id);
  }
  
  public static DashboardAnd getByKey(String key)
  {
    return (DashboardAnd) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static DashboardAnd lock(java.lang.String id)
  {
    DashboardAnd _instance = DashboardAnd.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static DashboardAnd unlock(java.lang.String id)
  {
    DashboardAnd _instance = DashboardAnd.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
