package com.runwaysdk.geodashboard;

@com.runwaysdk.business.ClassSignature(hash = 209786546)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to GeodashboardUser.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class GeodashboardUserBase extends com.runwaysdk.system.Users implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "com.runwaysdk.geodashboard.GeodashboardUser";
  public static java.lang.String EMAIL = "email";
  public static java.lang.String FIRSTNAME = "firstName";
  public static java.lang.String LASTNAME = "lastName";
  public static java.lang.String PHONENUMBER = "phoneNumber";
  private static final long serialVersionUID = 209786546;
  
  public GeodashboardUserBase()
  {
    super();
  }
  
  public String getEmail()
  {
    return getValue(EMAIL);
  }
  
  public void validateEmail()
  {
    this.validateAttribute(EMAIL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getEmailMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.GeodashboardUser.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(EMAIL);
  }
  
  public void setEmail(String value)
  {
    if(value == null)
    {
      setValue(EMAIL, "");
    }
    else
    {
      setValue(EMAIL, value);
    }
  }
  
  public String getFirstName()
  {
    return getValue(FIRSTNAME);
  }
  
  public void validateFirstName()
  {
    this.validateAttribute(FIRSTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getFirstNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.GeodashboardUser.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(FIRSTNAME);
  }
  
  public void setFirstName(String value)
  {
    if(value == null)
    {
      setValue(FIRSTNAME, "");
    }
    else
    {
      setValue(FIRSTNAME, value);
    }
  }
  
  public String getLastName()
  {
    return getValue(LASTNAME);
  }
  
  public void validateLastName()
  {
    this.validateAttribute(LASTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getLastNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.GeodashboardUser.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(LASTNAME);
  }
  
  public void setLastName(String value)
  {
    if(value == null)
    {
      setValue(LASTNAME, "");
    }
    else
    {
      setValue(LASTNAME, value);
    }
  }
  
  public String getPhoneNumber()
  {
    return getValue(PHONENUMBER);
  }
  
  public void validatePhoneNumber()
  {
    this.validateAttribute(PHONENUMBER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getPhoneNumberMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.GeodashboardUser.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(PHONENUMBER);
  }
  
  public void setPhoneNumber(String value)
  {
    if(value == null)
    {
      setValue(PHONENUMBER, "");
    }
    else
    {
      setValue(PHONENUMBER, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static GeodashboardUserQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    GeodashboardUserQuery query = new GeodashboardUserQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static GeodashboardUser get(String id)
  {
    return (GeodashboardUser) com.runwaysdk.business.Business.get(id);
  }
  
  public static GeodashboardUser getByKey(String key)
  {
    return (GeodashboardUser) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public void applyWithRoles(java.lang.String[] roleIds)
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.geodashboard.GeodashboardUser.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void applyWithRoles(java.lang.String id, java.lang.String[] roleIds)
  {
    GeodashboardUser _instance = GeodashboardUser.get(id);
    _instance.applyWithRoles(roleIds);
  }
  
  public static com.runwaysdk.geodashboard.GeodashboardUser[] getAllUsers()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.geodashboard.GeodashboardUser.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static com.runwaysdk.geodashboard.GeodashboardUser getCurrentUser()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.geodashboard.GeodashboardUser.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static java.lang.Boolean hasAccess(java.lang.String functionality)
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.geodashboard.GeodashboardUser.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static java.lang.Boolean isRoleMemeber(java.lang.String roles)
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.geodashboard.GeodashboardUser.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static GeodashboardUser lock(java.lang.String id)
  {
    GeodashboardUser _instance = GeodashboardUser.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static GeodashboardUser unlock(java.lang.String id)
  {
    GeodashboardUser _instance = GeodashboardUser.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
