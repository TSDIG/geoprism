package com.runwaysdk.geodashboard.report;

@com.runwaysdk.business.ClassSignature(hash = 1249598101)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ReportItemView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ReportItemViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "com.runwaysdk.geodashboard.report.ReportItemView";
  public static java.lang.String DASHBOARDLABEL = "dashboardLabel";
  public static java.lang.String ID = "id";
  public static java.lang.String REPORTID = "reportId";
  public static java.lang.String REPORTLABEL = "reportLabel";
  public static java.lang.String REPORTNAME = "reportName";
  private static final long serialVersionUID = 1249598101;
  
  public ReportItemViewBase()
  {
    super();
  }
  
  public String getDashboardLabel()
  {
    return getValue(DASHBOARDLABEL);
  }
  
  public void validateDashboardLabel()
  {
    this.validateAttribute(DASHBOARDLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDashboardLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.report.ReportItemView.CLASS);
    return mdClassIF.definesAttribute(DASHBOARDLABEL);
  }
  
  public void setDashboardLabel(String value)
  {
    if(value == null)
    {
      setValue(DASHBOARDLABEL, "");
    }
    else
    {
      setValue(DASHBOARDLABEL, value);
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.report.ReportItemView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public String getReportId()
  {
    return getValue(REPORTID);
  }
  
  public void validateReportId()
  {
    this.validateAttribute(REPORTID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getReportIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.report.ReportItemView.CLASS);
    return mdClassIF.definesAttribute(REPORTID);
  }
  
  public void setReportId(String value)
  {
    if(value == null)
    {
      setValue(REPORTID, "");
    }
    else
    {
      setValue(REPORTID, value);
    }
  }
  
  public String getReportLabel()
  {
    return getValue(REPORTLABEL);
  }
  
  public void validateReportLabel()
  {
    this.validateAttribute(REPORTLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getReportLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.report.ReportItemView.CLASS);
    return mdClassIF.definesAttribute(REPORTLABEL);
  }
  
  public void setReportLabel(String value)
  {
    if(value == null)
    {
      setValue(REPORTLABEL, "");
    }
    else
    {
      setValue(REPORTLABEL, value);
    }
  }
  
  public String getReportName()
  {
    return getValue(REPORTNAME);
  }
  
  public void validateReportName()
  {
    this.validateAttribute(REPORTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getReportNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.report.ReportItemView.CLASS);
    return mdClassIF.definesAttribute(REPORTNAME);
  }
  
  public void setReportName(String value)
  {
    if(value == null)
    {
      setValue(REPORTNAME, "");
    }
    else
    {
      setValue(REPORTNAME, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static ReportItemView get(String id)
  {
    return (ReportItemView) com.runwaysdk.business.View.get(id);
  }
  
  public void remove()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.geodashboard.report.ReportItemView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void remove(java.lang.String id)
  {
    ReportItemView _instance = ReportItemView.get(id);
    _instance.remove();
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
