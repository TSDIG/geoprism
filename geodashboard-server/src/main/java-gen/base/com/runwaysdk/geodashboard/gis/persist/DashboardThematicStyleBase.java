package com.runwaysdk.geodashboard.gis.persist;

@com.runwaysdk.business.ClassSignature(hash = 856101489)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to DashboardThematicStyle.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class DashboardThematicStyleBase extends com.runwaysdk.geodashboard.gis.persist.DashboardStyle implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "com.runwaysdk.geodashboard.gis.persist.DashboardThematicStyle";
  public static java.lang.String MDATTRIBUTE = "mdAttribute";
  public static java.lang.String STYLECONDITION = "styleCondition";
  private static final long serialVersionUID = 856101489;
  
  public DashboardThematicStyleBase()
  {
    super();
  }
  
  public com.runwaysdk.system.metadata.MdAttribute getMdAttribute()
  {
    if (getValue(MDATTRIBUTE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdAttribute.get(getValue(MDATTRIBUTE));
    }
  }
  
  public String getMdAttributeId()
  {
    return getValue(MDATTRIBUTE);
  }
  
  public void validateMdAttribute()
  {
    this.validateAttribute(MDATTRIBUTE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getMdAttributeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.gis.persist.DashboardThematicStyle.CLASS);
    return mdClassIF.definesAttribute(MDATTRIBUTE);
  }
  
  public void setMdAttribute(com.runwaysdk.system.metadata.MdAttribute value)
  {
    if(value == null)
    {
      setValue(MDATTRIBUTE, "");
    }
    else
    {
      setValue(MDATTRIBUTE, value.getId());
    }
  }
  
  public com.runwaysdk.geodashboard.gis.persist.condition.DashboardCondition getStyleCondition()
  {
    if (getValue(STYLECONDITION).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.geodashboard.gis.persist.condition.DashboardCondition.get(getValue(STYLECONDITION));
    }
  }
  
  public String getStyleConditionId()
  {
    return getValue(STYLECONDITION);
  }
  
  public void validateStyleCondition()
  {
    this.validateAttribute(STYLECONDITION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getStyleConditionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.gis.persist.DashboardThematicStyle.CLASS);
    return mdClassIF.definesAttribute(STYLECONDITION);
  }
  
  public void setStyleCondition(com.runwaysdk.geodashboard.gis.persist.condition.DashboardCondition value)
  {
    if(value == null)
    {
      setValue(STYLECONDITION, "");
    }
    else
    {
      setValue(STYLECONDITION, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static DashboardThematicStyleQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    DashboardThematicStyleQuery query = new DashboardThematicStyleQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static DashboardThematicStyle get(String id)
  {
    return (DashboardThematicStyle) com.runwaysdk.business.Business.get(id);
  }
  
  public static DashboardThematicStyle getByKey(String key)
  {
    return (DashboardThematicStyle) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static DashboardThematicStyle lock(java.lang.String id)
  {
    DashboardThematicStyle _instance = DashboardThematicStyle.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static DashboardThematicStyle unlock(java.lang.String id)
  {
    DashboardThematicStyle _instance = DashboardThematicStyle.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
