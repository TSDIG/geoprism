package com.runwaysdk.geodashboard.gis.persist;

@com.runwaysdk.business.ClassSignature(hash = 1476887378)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to DashboardThematicStyle.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class DashboardThematicStyleBase extends com.runwaysdk.geodashboard.gis.persist.DashboardStyle implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "com.runwaysdk.geodashboard.gis.persist.DashboardThematicStyle";
  public static java.lang.String BUBBLECONTINUOUSSIZE = "bubbleContinuousSize";
  public static java.lang.String MDATTRIBUTE = "mdAttribute";
  public static java.lang.String POINTFIXED = "pointFixed";
  public static java.lang.String POINTFIXEDSIZE = "pointFixedSize";
  public static java.lang.String POINTMAXSIZE = "pointMaxSize";
  public static java.lang.String POINTMINSIZE = "pointMinSize";
  public static java.lang.String POLYGONMAXFILL = "polygonMaxFill";
  public static java.lang.String POLYGONMINFILL = "polygonMinFill";
  public static java.lang.String STYLECATEGORIES = "styleCategories";
  public static java.lang.String STYLECONDITION = "styleCondition";
  private static final long serialVersionUID = 1476887378;
  
  public DashboardThematicStyleBase()
  {
    super();
  }
  
  public Boolean getBubbleContinuousSize()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(BUBBLECONTINUOUSSIZE));
  }
  
  public void validateBubbleContinuousSize()
  {
    this.validateAttribute(BUBBLECONTINUOUSSIZE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getBubbleContinuousSizeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.gis.persist.DashboardThematicStyle.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(BUBBLECONTINUOUSSIZE);
  }
  
  public void setBubbleContinuousSize(Boolean value)
  {
    if(value == null)
    {
      setValue(BUBBLECONTINUOUSSIZE, "");
    }
    else
    {
      setValue(BUBBLECONTINUOUSSIZE, java.lang.Boolean.toString(value));
    }
  }
  
  public com.runwaysdk.system.metadata.MdAttribute getMdAttribute()
  {
    if (getValue(MDATTRIBUTE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdAttribute.get(getValue(MDATTRIBUTE));
    }
  }
  
  public String getMdAttributeId()
  {
    return getValue(MDATTRIBUTE);
  }
  
  public void validateMdAttribute()
  {
    this.validateAttribute(MDATTRIBUTE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getMdAttributeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.gis.persist.DashboardThematicStyle.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(MDATTRIBUTE);
  }
  
  public void setMdAttribute(com.runwaysdk.system.metadata.MdAttribute value)
  {
    if(value == null)
    {
      setValue(MDATTRIBUTE, "");
    }
    else
    {
      setValue(MDATTRIBUTE, value.getId());
    }
  }
  
  public Boolean getPointFixed()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(POINTFIXED));
  }
  
  public void validatePointFixed()
  {
    this.validateAttribute(POINTFIXED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getPointFixedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.gis.persist.DashboardThematicStyle.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(POINTFIXED);
  }
  
  public void setPointFixed(Boolean value)
  {
    if(value == null)
    {
      setValue(POINTFIXED, "");
    }
    else
    {
      setValue(POINTFIXED, java.lang.Boolean.toString(value));
    }
  }
  
  public Integer getPointFixedSize()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(POINTFIXEDSIZE));
  }
  
  public void validatePointFixedSize()
  {
    this.validateAttribute(POINTFIXEDSIZE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getPointFixedSizeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.gis.persist.DashboardThematicStyle.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(POINTFIXEDSIZE);
  }
  
  public void setPointFixedSize(Integer value)
  {
    if(value == null)
    {
      setValue(POINTFIXEDSIZE, "");
    }
    else
    {
      setValue(POINTFIXEDSIZE, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getPointMaxSize()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(POINTMAXSIZE));
  }
  
  public void validatePointMaxSize()
  {
    this.validateAttribute(POINTMAXSIZE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getPointMaxSizeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.gis.persist.DashboardThematicStyle.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(POINTMAXSIZE);
  }
  
  public void setPointMaxSize(Integer value)
  {
    if(value == null)
    {
      setValue(POINTMAXSIZE, "");
    }
    else
    {
      setValue(POINTMAXSIZE, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getPointMinSize()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(POINTMINSIZE));
  }
  
  public void validatePointMinSize()
  {
    this.validateAttribute(POINTMINSIZE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getPointMinSizeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.gis.persist.DashboardThematicStyle.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(POINTMINSIZE);
  }
  
  public void setPointMinSize(Integer value)
  {
    if(value == null)
    {
      setValue(POINTMINSIZE, "");
    }
    else
    {
      setValue(POINTMINSIZE, java.lang.Integer.toString(value));
    }
  }
  
  public String getPolygonMaxFill()
  {
    return getValue(POLYGONMAXFILL);
  }
  
  public void validatePolygonMaxFill()
  {
    this.validateAttribute(POLYGONMAXFILL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getPolygonMaxFillMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.gis.persist.DashboardThematicStyle.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(POLYGONMAXFILL);
  }
  
  public void setPolygonMaxFill(String value)
  {
    if(value == null)
    {
      setValue(POLYGONMAXFILL, "");
    }
    else
    {
      setValue(POLYGONMAXFILL, value);
    }
  }
  
  public String getPolygonMinFill()
  {
    return getValue(POLYGONMINFILL);
  }
  
  public void validatePolygonMinFill()
  {
    this.validateAttribute(POLYGONMINFILL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getPolygonMinFillMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.gis.persist.DashboardThematicStyle.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(POLYGONMINFILL);
  }
  
  public void setPolygonMinFill(String value)
  {
    if(value == null)
    {
      setValue(POLYGONMINFILL, "");
    }
    else
    {
      setValue(POLYGONMINFILL, value);
    }
  }
  
  public String getStyleCategories()
  {
    return getValue(STYLECATEGORIES);
  }
  
  public void validateStyleCategories()
  {
    this.validateAttribute(STYLECATEGORIES);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getStyleCategoriesMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.gis.persist.DashboardThematicStyle.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(STYLECATEGORIES);
  }
  
  public void setStyleCategories(String value)
  {
    if(value == null)
    {
      setValue(STYLECATEGORIES, "");
    }
    else
    {
      setValue(STYLECATEGORIES, value);
    }
  }
  
  public com.runwaysdk.geodashboard.gis.persist.condition.DashboardCondition getStyleCondition()
  {
    if (getValue(STYLECONDITION).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.geodashboard.gis.persist.condition.DashboardCondition.get(getValue(STYLECONDITION));
    }
  }
  
  public String getStyleConditionId()
  {
    return getValue(STYLECONDITION);
  }
  
  public void validateStyleCondition()
  {
    this.validateAttribute(STYLECONDITION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getStyleConditionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.gis.persist.DashboardThematicStyle.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(STYLECONDITION);
  }
  
  public void setStyleCondition(com.runwaysdk.geodashboard.gis.persist.condition.DashboardCondition value)
  {
    if(value == null)
    {
      setValue(STYLECONDITION, "");
    }
    else
    {
      setValue(STYLECONDITION, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static DashboardThematicStyleQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    DashboardThematicStyleQuery query = new DashboardThematicStyleQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static DashboardThematicStyle get(String id)
  {
    return (DashboardThematicStyle) com.runwaysdk.business.Business.get(id);
  }
  
  public static DashboardThematicStyle getByKey(String key)
  {
    return (DashboardThematicStyle) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static DashboardThematicStyle lock(java.lang.String id)
  {
    DashboardThematicStyle _instance = DashboardThematicStyle.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static DashboardThematicStyle unlock(java.lang.String id)
  {
    DashboardThematicStyle _instance = DashboardThematicStyle.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
