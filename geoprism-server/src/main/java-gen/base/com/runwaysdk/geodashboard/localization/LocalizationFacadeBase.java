/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.geodashboard.localization;

@com.runwaysdk.business.ClassSignature(hash = 2055169719)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to LocalizationFacade.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class LocalizationFacadeBase extends com.runwaysdk.business.Util implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "com.runwaysdk.geodashboard.localization.LocalizationFacade";
  public static java.lang.String ID = "id";
  private static final long serialVersionUID = 2055169719;
  
  public LocalizationFacadeBase()
  {
    super();
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(com.runwaysdk.geodashboard.localization.LocalizationFacade.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static LocalizationFacade get(String id)
  {
    return (LocalizationFacade) com.runwaysdk.business.Util.get(id);
  }
  
  public static java.lang.String getCLDRLocaleName()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.geodashboard.localization.LocalizationFacade.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static java.lang.String getCalendarLocale()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.geodashboard.localization.LocalizationFacade.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static java.lang.String getConfigurationJSON()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.geodashboard.localization.LocalizationFacade.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static java.lang.String getFromBundles(java.lang.String key)
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.geodashboard.localization.LocalizationFacade.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static java.lang.String getJSON()
  {
    String msg = "This method should never be invoked.  It should be overwritten in com.runwaysdk.geodashboard.localization.LocalizationFacade.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
