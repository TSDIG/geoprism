package net.geoprism.data.etl.excel;

@com.runwaysdk.business.ClassSignature(hash = -1349238224)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ExcelHeaderException.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ExcelHeaderExceptionBase extends com.runwaysdk.business.SmartException implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "net.geoprism.data.etl.excel.ExcelHeaderException";
  public static java.lang.String COLUMN = "column";
  public static java.lang.String ID = "id";
  public static java.lang.String MSG = "msg";
  public static java.lang.String ROW = "row";
  private static final long serialVersionUID = -1349238224;
  
  public ExcelHeaderExceptionBase()
  {
    super();
  }
  
  public ExcelHeaderExceptionBase(java.lang.String developerMessage)
  {
    super(developerMessage);
  }
  
  public ExcelHeaderExceptionBase(java.lang.String developerMessage, java.lang.Throwable cause)
  {
    super(developerMessage, cause);
  }
  
  public ExcelHeaderExceptionBase(java.lang.Throwable cause)
  {
    super(cause);
  }
  
  public String getColumn()
  {
    return getValue(COLUMN);
  }
  
  public void validateColumn()
  {
    this.validateAttribute(COLUMN);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getColumnMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.data.etl.excel.ExcelHeaderException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(COLUMN);
  }
  
  public void setColumn(String value)
  {
    if(value == null)
    {
      setValue(COLUMN, "");
    }
    else
    {
      setValue(COLUMN, value);
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.data.etl.excel.ExcelHeaderException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public String getMsg()
  {
    return getValue(MSG);
  }
  
  public void validateMsg()
  {
    this.validateAttribute(MSG);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getMsgMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.data.etl.excel.ExcelHeaderException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(MSG);
  }
  
  public void setMsg(String value)
  {
    if(value == null)
    {
      setValue(MSG, "");
    }
    else
    {
      setValue(MSG, value);
    }
  }
  
  public String getRow()
  {
    return getValue(ROW);
  }
  
  public void validateRow()
  {
    this.validateAttribute(ROW);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getRowMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.data.etl.excel.ExcelHeaderException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(ROW);
  }
  
  public void setRow(String value)
  {
    if(value == null)
    {
      setValue(ROW, "");
    }
    else
    {
      setValue(ROW, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{column}", this.getColumn());
    message = replace(message, "{id}", this.getId());
    message = replace(message, "{msg}", this.getMsg());
    message = replace(message, "{row}", this.getRow());
    return message;
  }
  
}
