/**
 * Copyright (c) 2015 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Runway SDK(tm).
 *
 * Runway SDK(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Runway SDK(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package com.runwaysdk.geodashboard.databrowser;

import com.runwaysdk.query.AND;
import com.runwaysdk.query.Condition;
import com.runwaysdk.system.metadata.MdBusinessQuery;

/**
 *
 * @author Autogenerated by RunwaySDK
 */
public class MetadataTypeQuery extends com.runwaysdk.geodashboard.databrowser.MetadataTypeQueryBase implements com.runwaysdk.generation.loader.Reloadable
{
  protected MdBusinessQuery businessQuery;

  protected String[]        packages;

  protected String[]        types;

  public MetadataTypeQuery(com.runwaysdk.query.QueryFactory queryFactory, String[] packages, String[] types)
  {
    super(queryFactory);

    this.businessQuery = new MdBusinessQuery(queryFactory);
    this.packages = packages;
    this.types = types;

    this.buildQuery(new DefaultMetadataTypeBuilder(queryFactory));
  }

  class DefaultMetadataTypeBuilder extends com.runwaysdk.query.ViewQueryBuilder implements com.runwaysdk.generation.loader.Reloadable
  {
    public DefaultMetadataTypeBuilder(com.runwaysdk.query.QueryFactory queryFactory)
    {
      super(queryFactory);
    }

    protected MetadataTypeQuery getViewQuery()
    {
      return (MetadataTypeQuery) super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      MetadataTypeQuery q = this.getViewQuery();

      q.map(MetadataType.DISPLAYLABEL, businessQuery.getDisplayLabel().localize());
      q.map(MetadataType.PARENTTYPEID, businessQuery.getSuperMdBusiness());
      q.map(MetadataType.TYPEID, businessQuery.getId());
      q.map(MetadataType.TYPENAME, businessQuery.getTypeName());
      q.map(MetadataType.TYPEPACKAGE, businessQuery.getPackageName());
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {
      Condition conditions = null;

      for (String pack : packages)
      {
        conditions = this.addCondition(conditions, this.getPackageCondition(pack));
      }

      for (String type : types)
      {
        int lastPeriod = type.lastIndexOf('.');

        String pack = type.substring(0, lastPeriod);
        String typeName = type.substring(lastPeriod + 1);

        Condition condition = AND.get(getPackageCondition(pack), businessQuery.getTypeName().EQ(typeName));

        conditions = this.addCondition(conditions, condition);
      }

      this.getViewQuery().WHERE(conditions);
    }

    private Condition getPackageCondition(String pack)
    {
      if (pack.contains("%"))
      {
        return businessQuery.getPackageName().LIKEi(pack);
      }

      return businessQuery.getPackageName().EQ(pack);
    }

    private Condition addCondition(Condition conditions, Condition condition)
    {
      if (conditions == null)
      {
        return condition;
      }

      return conditions.OR(condition);
    }

  }
}
